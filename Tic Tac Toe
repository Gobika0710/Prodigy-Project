<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Tic-Tac-Toe - Prodigy Infotech Task 03</title>
  <style>
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      display: flex;
      flex-direction: column;
      align-items: center;
      justify-content: center;
      height: 100vh;
      margin: 0;
      background: #f5f5f5;
    }

    h1 {
      margin-bottom: 20px;
      color: #333;
    }

    .board {
      display: grid;
      grid-template-columns: repeat(3, 100px);
      grid-gap: 5px;
    }

    .cell {
      width: 100px;
      height: 100px;
      background-color: white;
      display: flex;
      align-items: center;
      justify-content: center;
      font-size: 2em;
      font-weight: bold;
      cursor: pointer;
      border: 2px solid #333;
      transition: background-color 0.3s;
    }

    .cell:hover {
      background-color: #e0e0e0;
    }

    .status {
      margin-top: 20px;
      font-size: 1.2em;
      color: #333;
    }

    .restart-button {
      margin-top: 15px;
      padding: 10px 20px;
      font-size: 1em;
      border: none;
      border-radius: 5px;
      background-color: #4CAF50;
      color: white;
      cursor: pointer;
      transition: background-color 0.3s;
    }

    .restart-button:hover {
      background-color: #45a049;
    }
  </style>
</head>

<body>
  <h1>Tic-Tac-Toe</h1>
  <div class="board" id="board">
    <!-- 9 cells will be generated by JavaScript -->
  </div>
  <div class="status" id="status">Player X's turn</div>
  <button class="restart-button" onclick="restartGame()">Restart</button>

  <script>
    const board = document.getElementById('board');
    const statusDisplay = document.getElementById('status');
    let cells = [];
    let currentPlayer = 'X';
    let gameActive = true;

    const winningConditions = [
      [0,1,2], [3,4,5], [6,7,8], // Rows
      [0,3,6], [1,4,7], [2,5,8], // Columns
      [0,4,8], [2,4,6]           // Diagonals
    ];

    function handleCellClick(e) {
      const cell = e.target;
      const cellIndex = cells.indexOf(cell);

      if (cell.textContent !== '' || !gameActive) return;

      // Set symbol depending on current player
      if (currentPlayer === 'X') {
        cell.textContent = 'X';
      } else {
        cell.textContent = '❤️';
      }

      checkResult();

      // Switch player
      currentPlayer = currentPlayer === 'X' ? 'Heart' : 'X';
      if (gameActive) {
        if (currentPlayer === 'X') {
          statusDisplay.textContent = `Player X's turn`;
        } else {
          statusDisplay.textContent = `Player ❤️'s turn`;
        }
      }
    }

    function checkResult() {
      let roundWon = false;
      for (let condition of winningConditions) {
        const [a, b, c] = condition;
        if (cells[a].textContent &&
            cells[a].textContent === cells[b].textContent &&
            cells[b].textContent === cells[c].textContent) {
          roundWon = true;
          break;
        }
      }

      if (roundWon) {
        if (currentPlayer === 'X') {
          statusDisplay.textContent = `Player X wins! 🎉`;
        } else {
          statusDisplay.textContent = `Player ❤️ wins! 🎉`;
        }
        gameActive = false;
        return;
      }

      if (cells.every(cell => cell.textContent !== '')) {
        statusDisplay.textContent = "It's a Draw!";
        gameActive = false;
      }
    }

    function restartGame() {
      cells.forEach(cell => cell.textContent = '');
      currentPlayer = 'X';
      gameActive = true;
      statusDisplay.textContent = `Player X's turn`;
    }

    function initializeGame() {
      for (let i = 0; i < 9; i++) {
        const cell = document.createElement('div');
        cell.classList.add('cell');
        cell.addEventListener('click', handleCellClick);
        board.appendChild(cell);
        cells.push(cell);
      }
    }

    initializeGame();
  </script>
</body>
</html>
